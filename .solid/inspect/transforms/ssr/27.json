{
  "id": "/Users/jeffersonfonseca/Documents/Projeto Pessoal/solid-test/node_modules/solid-start/root/Links.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid",
    "vite:define"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { JSXElement, useContext } from \"solid-js\";\nimport { useAssets } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { ManifestEntry, PageEvent } from \"../server/types\";\nimport { routeLayouts } from \"./InlineStyles\";\n\nfunction flattenIslands(match, manifest) {\n  let result = [...match];\n  match.forEach(m => {\n    if (m.type !== \"island\") return;\n    const islandManifest = manifest[m.href];\n    if (islandManifest) {\n      const res = flattenIslands(islandManifest.assets, manifest);\n      result.push(...res);\n    }\n  });\n  return result;\n}\n\nfunction getAssetsFromManifest(\n  manifest: PageEvent[\"env\"][\"manifest\"],\n  routerContext: PageEvent[\"routerContext\"]\n) {\n  let match = routerContext.matches.reduce<ManifestEntry[]>((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...((manifest[route.id] || []) as ManifestEntry[]));\n        const layoutsManifestEntries = route.layouts.flatMap(\n          manifestKey => (manifest[manifestKey] || []) as ManifestEntry[]\n        );\n        memo.push(...layoutsManifestEntries);\n      }\n    }\n    return memo;\n  }, []);\n\n  match.push(...((manifest[\"entry-client\"] || []) as ManifestEntry[]));\n\n  match = flattenIslands(match, manifest);\n\n  const links = match.reduce((r, src) => {\n    r[src.href] =\n      src.type === \"style\" ? (\n        <link rel=\"stylesheet\" href={src.href} $ServerOnly />\n      ) : src.type === \"script\" ? (\n        <link rel=\"modulepreload\" href={src.href} $ServerOnly />\n      ) : undefined;\n    return r;\n  }, {} as Record<string, JSXElement>);\n\n  return Object.values(links);\n}\n\n/**\n * Links are used to load assets for the server rendered HTML\n * @returns {JSXElement}\n */\nexport default function Links() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  !isDev &&\n    import.meta.env.START_SSR &&\n    useAssets(() => getAssetsFromManifest(context.env.manifest, context.routerContext));\n  return null;\n}\n",
      "start": 1668429520496,
      "end": 1668429520530
    },
    {
      "name": "solid",
      "result": "import { ssr as _$ssr } from \"solid-js/web\";\nimport { ssrAttribute as _$ssrAttribute } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<link\", \" rel=\\\"stylesheet\\\"\", \">\"],\n  _tmpl$2 = [\"<link\", \" rel=\\\"modulepreload\\\"\", \">\"];\nimport { useContext } from \"solid-js\";\nimport { useAssets } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { routeLayouts } from \"./InlineStyles\";\nfunction flattenIslands(match, manifest) {\n  let result = [...match];\n  match.forEach(m => {\n    if (m.type !== \"island\") return;\n    const islandManifest = manifest[m.href];\n    if (islandManifest) {\n      const res = flattenIslands(islandManifest.assets, manifest);\n      result.push(...res);\n    }\n  });\n  return result;\n}\nfunction getAssetsFromManifest(manifest, routerContext) {\n  let match = routerContext.matches.reduce((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...(manifest[route.id] || []));\n        const layoutsManifestEntries = route.layouts.flatMap(manifestKey => manifest[manifestKey] || []);\n        memo.push(...layoutsManifestEntries);\n      }\n    }\n    return memo;\n  }, []);\n  match.push(...(manifest[\"entry-client\"] || []));\n  match = flattenIslands(match, manifest);\n  const links = match.reduce((r, src) => {\n    r[src.href] = src.type === \"style\" ? _$ssr(_tmpl$, _$ssrHydrationKey(), _$ssrAttribute(\"href\", _$escape(src.href, true), false)) : src.type === \"script\" ? _$ssr(_tmpl$2, _$ssrHydrationKey(), _$ssrAttribute(\"href\", _$escape(src.href, true), false)) : undefined;\n    return r;\n  }, {});\n  return Object.values(links);\n}\n\n/**\n * Links are used to load assets for the server rendered HTML\n * @returns {JSXElement}\n */\nexport default function Links() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  !isDev && import.meta.env.START_SSR && useAssets(() => getAssetsFromManifest(context.env.manifest, context.routerContext));\n  return null;\n}",
      "start": 1668429520530,
      "end": 1668429520534
    },
    {
      "name": "vite:define",
      "result": "import { ssr as _$ssr } from \"solid-js/web\";\nimport { ssrAttribute as _$ssrAttribute } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<link\", \" rel=\\\"stylesheet\\\"\", \">\"],\n  _tmpl$2 = [\"<link\", \" rel=\\\"modulepreload\\\"\", \">\"];\nimport { useContext } from \"solid-js\";\nimport { useAssets } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { routeLayouts } from \"./InlineStyles\";\nfunction flattenIslands(match, manifest) {\n  let result = [...match];\n  match.forEach(m => {\n    if (m.type !== \"island\") return;\n    const islandManifest = manifest[m.href];\n    if (islandManifest) {\n      const res = flattenIslands(islandManifest.assets, manifest);\n      result.push(...res);\n    }\n  });\n  return result;\n}\nfunction getAssetsFromManifest(manifest, routerContext) {\n  let match = routerContext.matches.reduce((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...(manifest[route.id] || []));\n        const layoutsManifestEntries = route.layouts.flatMap(manifestKey => manifest[manifestKey] || []);\n        memo.push(...layoutsManifestEntries);\n      }\n    }\n    return memo;\n  }, []);\n  match.push(...(manifest[\"entry-client\"] || []));\n  match = flattenIslands(match, manifest);\n  const links = match.reduce((r, src) => {\n    r[src.href] = src.type === \"style\" ? _$ssr(_tmpl$, _$ssrHydrationKey(), _$ssrAttribute(\"href\", _$escape(src.href, true), false)) : src.type === \"script\" ? _$ssr(_tmpl$2, _$ssrHydrationKey(), _$ssrAttribute(\"href\", _$escape(src.href, true), false)) : undefined;\n    return r;\n  }, {});\n  return Object.values(links);\n}\n\n/**\n * Links are used to load assets for the server rendered HTML\n * @returns {JSXElement}\n */\nexport default function Links() {\n  const isDev = \"production\" === \"development\";\n  const context = useContext(ServerContext);\n  !isDev && true && useAssets(() => getAssetsFromManifest(context.env.manifest, context.routerContext));\n  return null;\n}",
      "start": 1668429520534,
      "end": 1668429520534
    }
  ],
  "virtual": false
}